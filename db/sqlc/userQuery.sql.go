// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: userQuery.sql

package db

// import (
// 	"context"
// 	"database/sql"
// 	"time"
// )

// const createUser = `-- name: CreateUser :one
// INSERT INTO users(
//     full_name,username,password,photo,created_at
// )values (
//     $1,$2,$3,$4,$5
// )
// RETURNING id, full_name, username, password, photo, created_at
// `

// type CreateUserParams struct {
// 	FullName  sql.NullString `json:"full_name"`
// 	Username  sql.NullString `json:"username"`
// 	Password  sql.NullString `json:"password"`
// 	Photo     sql.NullString `json:"photo"`
// 	CreatedAt time.Time      `json:"created_at"`
// }

// func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
// 	row := q.db.QueryRowContext(ctx, createUser,
// 		arg.FullName,
// 		arg.Username,
// 		arg.Password,
// 		arg.Photo,
// 		arg.CreatedAt,
// 	)
// 	var i User
// 	err := row.Scan(
// 		&i.ID,
// 		&i.FullName,
// 		&i.Username,
// 		&i.Password,
// 		&i.Photo,
// 		&i.CreatedAt,
// 	)
// 	return i, err
// }

// const getUser = `-- name: GetUser :one
// SELECT id, full_name, username, password, photo, created_at FROM users where id = $1
// `

// func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
// 	row := q.db.QueryRowContext(ctx, getUser, id)
// 	var i User
// 	err := row.Scan(
// 		&i.ID,
// 		&i.FullName,
// 		&i.Username,
// 		&i.Password,
// 		&i.Photo,
// 		&i.CreatedAt,
// 	)
// 	return i, err
// }
