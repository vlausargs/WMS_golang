// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: WHSEQuery.sql

package db

import (
	"context"
)

const createWHSE = `-- name: CreateWHSE :one
INSERT INTO "WHSE"
(whseid, "desc", create_date)
VALUES($1,$2, now())
RETURNING whseid, "desc", create_date
`

type CreateWHSEParams struct {
	Whseid string `json:"whseid"`
	Desc   string `json:"desc"`
}

func (q *Queries) CreateWHSE(ctx context.Context, arg CreateWHSEParams) (WHSE, error) {
	row := q.db.QueryRowContext(ctx, createWHSE, arg.Whseid, arg.Desc)
	var i WHSE
	err := row.Scan(&i.Whseid, &i.Desc, &i.CreateDate)
	return i, err
}

const getAllWHSE = `-- name: GetAllWHSE :many
SELECT whseid, "desc", create_date FROM "WHSE"
`

func (q *Queries) GetAllWHSE(ctx context.Context) ([]WHSE, error) {
	rows, err := q.db.QueryContext(ctx, getAllWHSE)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WHSE
	for rows.Next() {
		var i WHSE
		if err := rows.Scan(&i.Whseid, &i.Desc, &i.CreateDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWHSE = `-- name: GetWHSE :one
SELECT whseid, "desc", create_date FROM "WHSE" where whseid = $1
`

func (q *Queries) GetWHSE(ctx context.Context, whseid string) (WHSE, error) {
	row := q.db.QueryRowContext(ctx, getWHSE, whseid)
	var i WHSE
	err := row.Scan(&i.Whseid, &i.Desc, &i.CreateDate)
	return i, err
}
